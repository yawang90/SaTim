generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model projects {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(40)
  description    String?          @db.VarChar(255)
  owner_id       Int
  created_at     DateTime         @default(now()) @db.Timestamptz(6)
  updated_at     DateTime         @default(now()) @db.Timestamptz(6)
  project_access project_access[]
  surveys        survey[]
  users          users            @relation(fields: [owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id             Int              @id @default(autoincrement())
  last_name      String           @db.VarChar(100)
  first_name     String           @db.VarChar(100)
  email          String           @unique @db.VarChar(100)
  password       String           @db.VarChar(255)
  roles          user_role[]
  created_at     DateTime?        @default(now()) @db.Timestamp(6)
  changed_at     DateTime?
  changed_by     String?          @db.VarChar(255)
  project_access project_access[]
  projects       projects[]
  response       response[]
}

model project_access {
  project_id Int
  user_id    Int
  role       project_access_role @default(viewer)
  granted_at DateTime            @default(now()) @db.Timestamptz(6)
  projects   projects            @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([project_id, user_id])
}

model survey {
  id           String     @id @default(uuid())
  title        String
  description  String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  excelFileUrl String?
  projectId    Int
  project      projects   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  responses    response[]
}

model response {
  id         String   @id @default(uuid())
  survey     survey   @relation(fields: [surveyId], references: [id])
  surveyId   String
  createdAt  DateTime @default(now())
  questions  question[]
  userId     Int
  user       users   @relation(fields: [userId], references: [id])
  completed  Boolean @default(false)
  @@index([userId])
  @@index([surveyId])
}

model question {
  id         String   @id @default(uuid())
  response   response @relation(fields: [responseId], references: [id])
  responseId String
  answer     choice?
  competencesFrom String[]
  competencesTo String[]
  @@index([responseId])
}

enum changed_by {
  SATIM_APP
}

enum project_access_role {
  viewer
  editor
  admin
}

enum user_role {
  ADMIN
  PARTICIPANT
  GENERAL
}

enum choice {
  Ja
  Nein
}